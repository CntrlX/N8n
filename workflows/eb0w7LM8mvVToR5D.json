{
  "active": false,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Authentication",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Auth Error": {
      "main": [
        [
          {
            "node": "Validator",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Validation Error": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Authentication": {
      "main": [
        [
          {
            "node": "IF Auth Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validator": {
      "main": [
        [
          {
            "node": "IF Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-10T15:52:11.767Z",
  "id": "eb0w7LM8mvVToR5D",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "automatic question follow up",
  "nodes": [
    {
      "parameters": {
        "path": "generate-followup",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -1000,
        200
      ],
      "id": "bd18ada1-42e6-4c51-8310-c3c7239d1408",
      "typeVersion": 2,
      "webhookId": "23f0c4a6-0d42-4ec4-9376-063f4ba1de66"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "43a61ca7-2ce0-4b6e-b512-a04dceb806a4",
              "leftValue": "={{ $json.message }}",
              "rightValue": "Authorized",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "IF Auth Error",
      "type": "n8n-nodes-base.if",
      "position": [
        -380,
        200
      ],
      "id": "9f9a110d-70b5-41ce-836c-7720fc70229e",
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "de678ee5-524c-46d9-be72-ba0886240ffa",
              "leftValue": "={{ $json.errors[0] }}",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "IF Validation Error",
      "type": "n8n-nodes-base.if",
      "position": [
        -20,
        -40
      ],
      "id": "aab02fa6-48c6-4522-bd5a-99ed461624c9",
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        1480,
        200
      ],
      "id": "398e68c3-54ef-40a1-9c1e-10a6082dee6d",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "jsCode": "const authHeader = $json.headers?.authorization || '';\n\nif (!authHeader.startsWith('Bearer ')) {\n  throw new Error('Missing or invalid Authorization header');\n}\n\nconst token = authHeader.replace('Bearer ', '');\n\n// Simple validation example — replace with real check\nconst validToken = 'your-test-access-token';\n\nif (token !== validToken) {\n  return [{\n    json:{\n      message:'UnAuthorized'\n    }\n  }]\n}\n\n// Pass data forward if valid\nreturn [\n  {\n    json: {\n      message: 'Authorized',\n      token,\n      data:$json.body\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -780,
        200
      ],
      "id": "1be1b975-a5f4-4be6-8087-ad93af6484c5",
      "name": "Authentication"
    },
    {
      "parameters": {
        "jsCode": "const data = items[0].json.data\n\nconst errors = [];\n\n// Required fields\nif (typeof data.survey_question !== 'string' || data.survey_question.trim() === '') {\n  errors.push('Missing or invalid field: survey_question');\n}\n\nif (typeof data.open_end_response !== 'string' || data.open_end_response.trim() === '') {\n  errors.push('Missing or invalid field: open_end_response');\n}\n\n// Optional fields\nif (data.question_count !== undefined) {\n  if (typeof data.question_count !== 'number' || data.question_count < 1 || data.question_count > 5) {\n    errors.push('Invalid value for question_count (must be 1–5)');\n  }\n}\n\nif (data.tone !== undefined) {\n  const allowedTones = ['neutral', 'formal', 'friendly'];\n  if (!allowedTones.includes(data.tone)) {\n    errors.push('Invalid tone. Allowed: neutral, formal, friendly');\n  }\n}\n\nif (data.context !== undefined) {\n  if (typeof data.context !== 'string' || data.context.length > 1000) {\n    errors.push('context must be a string with max 1000 characters');\n  }\n}\n\nif (data.force_follow_up !== undefined && typeof data.force_follow_up !== 'boolean') {\n  errors.push('force_follow_up must be a boolean');\n}\n\nif (data.metadata !== undefined && typeof data.metadata !== 'object') {\n  errors.push('metadata must be an object');\n}\n\n// Return result\nif (errors.length > 0) {\n  return [\n    {\n      json: {\n        status: 'error',\n        errors,\n      },\n    },\n  ];\n}\n\nreturn [\n  {\n    json: {\n      status: 'success',\n      validatedData: data,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -220,
        40
      ],
      "id": "c0efdda3-c66e-43d5-9434-7a2dc3291796",
      "name": "Validator"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        -160
      ],
      "id": "87bbba1d-8896-42d1-8aa4-2e9187933350",
      "name": "Code"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "GPT-3.5-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an expert survey assistant.\n\nGiven the original survey question, the respondent’s answer, and the tone of the response, your task is to:\n1. Analyze the **tone** of the original survey question and the respondent's answer.\n2. If the **tone** is friendly:\n   - If the response is **clear and provides useful details**, generate follow-up questions to gather more insights.\n   - If the response is **short** or **ambiguous** (e.g., 'No', 'I don't know', etc.), ask clarifying questions or skip follow-up questions if no further detail can be gathered.\n   \n3. Based on the **survey question** and **open-ended response**, generate **appropriate follow-up questions** or a **thank-you message**.\n\n#### Here’s the format of the JSON response:\n{\n  \"detected_tone\": \"<tone>\",\n  \"follow_up_needed\": <true | false>,\n  \"follow_up_questions\": [\"<question 1>\", \"<question 2>\", ...], // Length = question_count or 0\n  \"thank_you_message\": \"<message>\"\n}\n\n### Key Rules:\n1. **If the response is short** (e.g., just 'No', 'Yes', 'I don’t know'), clarify the response by asking for more detail. For example:\n   - “Can you provide more details?” \n   - “What specifically made you feel this way?”\n2. **Avoid irrelevant or disconnected questions** (e.g., asking about \"features\" when the answer is about general feelings or satisfaction).\n3.if {{ $json.validatedData.open_end_response }} tone is negetive in nature and feel like no follow up is required, set `follow_up_needed: false` and return a brief thank-you message.\n\nOriginal survey question: \"{{ $json.validatedData.survey_question }}\"\nRespondent’s answer: {{ $json.validatedData.open_end_response }}\"\"\n\nReturn only valid JSON.\n",
              "role": "assistant"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        740,
        -480
      ],
      "id": "78c850e5-4ef1-47a9-9e8d-c98a4ebffdd2",
      "name": "OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "kYMWduOenOVn8Iv6",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert survey assistant.\n\nGiven the original survey question, the respondent’s answer, and the tone of the response, your task is to:\n1. Analyze the **tone** of the original survey question and the respondent's answer.\n2. If the **tone** is friendly:\n   - If the response is **clear and provides useful details**, generate follow-up questions to gather more insights.\n   - If the response is **short** or **ambiguous** (e.g., 'No', 'I don't know', etc.), ask clarifying questions or skip follow-up questions if no further detail can be gathered.\n   \n3. Based on the **survey question** and **open-ended response**, generate **appropriate follow-up questions** or a **thank-you message**.\n\n#### Here’s the format of the JSON response:\n{\n  \"detected_tone\": \"<tone>\",\n  \"follow_up_needed\": <true | false>,\n  \"follow_up_questions\": [\"<question 1>\", \"<question 2>\", ...], // Length = question_count or 0\n  \"thank_you_message\": \"<message>\"\n}\n\n### Key Rules:\n1. **If the response is short** (e.g., just 'No', 'Yes', 'I don’t know'), clarify the response by asking for more detail. For example:\n   - “Can you provide more details?” \n   - “What specifically made you feel this way?”\n2. **Avoid irrelevant or disconnected questions** (e.g., asking about \"features\" when the answer is about general feelings or satisfaction).\n3.if {{ $json.validatedData.open_end_response }} tone is negetive in nature and feel like no follow up is required, set `follow_up_needed: false` and return a brief thank-you message.\n\nOriginal survey question: \"{{ $json.validatedData.survey_question }}\"\nRespondent’s answer: {{ $json.validatedData.open_end_response }}\"\"\n\nReturn only valid JSON.\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        740,
        -280
      ],
      "id": "48c03565-cbaa-4b43-90e1-4ed6c3fc997f",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        680,
        -80
      ],
      "id": "c18f22c0-9429-4377-a4b5-9f0bfacdc0fb",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "kYMWduOenOVn8Iv6",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"detected_tone\": \"neutral\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        940,
        -20
      ],
      "id": "5d44125b-8c47-4e32-be35-da31669cb5c4",
      "name": "Structured Output Parser"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-05-14T05:02:26.942Z",
  "versionId": "9624d6f3-2b94-4184-9539-e98039a798ef"
}